package com.training.quizzer.ui;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.logging.Logger;
import java.util.stream.Stream;

import com.training.quizzer.ui.view.*;
import com.vaadin.ui.*;
import org.hibernate.mapping.Collection;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;

import com.training.quizzer.model.User;
import com.training.quizzer.repository.UserRepository;
import com.vaadin.annotations.PreserveOnRefresh;
import com.vaadin.annotations.Push;
import com.vaadin.annotations.Theme;
import com.vaadin.annotations.Widgetset;
import com.vaadin.navigator.Navigator;
import com.vaadin.navigator.ViewChangeListener;
import com.vaadin.server.VaadinRequest;
import com.vaadin.server.VaadinSession;
import com.vaadin.shared.communication.PushMode;
import com.vaadin.shared.ui.ui.Transport;
import com.vaadin.spring.annotation.SpringUI;
import com.vaadin.spring.navigator.SpringViewProvider;


/**
 * Created by alexandru.sandu
 */
@SpringUI
@Theme("valo")
@Push(transport = Transport.WEBSOCKET, value = PushMode.AUTOMATIC)
@PreserveOnRefresh
@Widgetset("com.training.quizzer.ui.quizzerWidgetSet")
public class quizzerUI extends UI {
    private static final Logger logger = Logger.getLogger(quizzerUI.class.getName());
    
    @Value("${version}")
    public String version;
    @Value("${artifactId}")
    public String artifactId;
    @Value("${groupId}")
    public String groupId;
    @Value("${timestamp}")
    public String date;
    @Value("${revisionNumber}")
    public String revisionNumber;
    // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    @Autowired
    private SpringViewProvider viewProvider;

    @Autowired
    private UserRepository userRepository;

    public Navigator navigator;

    private HorizontalLayout root;
    private VerticalLayout navigationButtons;
    private Panel viewContainer;

    private Button logoutButton;
    private Button homeButton;
    private Button level1Button;
    private Button level2Button;
    private Button level3Button;
    private Button level4Button;
    private Button level5Button;
    private Button level6Button;
    private Button level7Button;
    private Button adminButton;


    @Override
    protected void init(VaadinRequest vaadinRequest) {
        getPage().setTitle("Quizzer");
//        showUsers();

        buildMainLayout();
        configureLevelButtons();
        addButtonListeners();
        // We use a view change handler to ensure the user is always redirected
        // to the login view if the user is not logged in.
        getNavigator().addViewChangeListener(new ViewChangeListener() {

            @Override
            public boolean beforeViewChange(ViewChangeEvent event) {

                // Check if a user has logged in
                boolean isLoggedIn = getSession().getAttribute("user") != null;
                boolean isLoginView = event.getNewView() instanceof LoginView;
                boolean isAdminView = event.getNewView() instanceof AdminView;
                boolean isRegisterView = event.getNewView() instanceof RegisterView;

                User loggedUser = (User) VaadinSession.getCurrent().getAttribute("user");

                if (isLoggedIn) {
                    navigationButtons.setVisible(true);
                    checkAvailableLevels(loggedUser);
                } else {
                    navigationButtons.setVisible(false);
                }


                if (loggedUser != null) {
                    if (User.Role.USER != loggedUser.getRole() && User.Role.ADMIN != loggedUser.getRole()) {
                        getNavigator().navigateTo(LoginView.VIEW_NAME);
                        return false;
                    } else if ((User.Role.ADMIN != loggedUser.getRole()) && (isAdminView)) {
                        getNavigator().navigateTo(MainQuizzerView.VIEW_NAME);
                        Notification.show("You need admin privileges for this view", Notification.Type.WARNING_MESSAGE);
                        return false;
                    } else if (User.Status.ACTIVE != loggedUser.getStatus()) {
                        getNavigator().navigateTo(LoginView.VIEW_NAME);
                        Notification.show("Your user account is not active", Notification.Type.WARNING_MESSAGE);
                        return false;
                    } else if (!isLoggedIn && !isLoginView) {
                        // Redirect to login view always if a user has not yet
                        // logged in
                        getNavigator().navigateTo(LoginView.VIEW_NAME);
                        return false;
                    } else if (isLoggedIn && isLoginView) {
                        // If someone tries to access to login view while logged
                        // in, then cancel

                            getNavigator().navigateTo(MainQuizzerView.VIEW_NAME);

                        return false;
                    }  else if (isLoggedIn && !isLoginView) {
                        return true;
                    }
                } else if (loggedUser == null) {
                    if(isRegisterView){
                        return true;
                    } else if (!isLoginView) {
                        getNavigator().navigateTo(LoginView.VIEW_NAME);
                        return false;
                    }
                }

                return true;
            }

            @Override
            public void afterViewChange(ViewChangeEvent event) {

            }
        });
    }

    private void checkAvailableLevels(User loggedUser) {
        List<Button> buttons = new ArrayList<>();
        buttons.addAll(Arrays.asList( level1Button, level2Button, level3Button,
                level4Button, level5Button, level6Button, level7Button));
        for (int i = 0; i < buttons.size() ; i++) {
            if (Integer.parseInt(loggedUser.getCurrentLevel()) >= i+1)
                buttons.get(i).setEnabled(true);
            else buttons.get(i).setEnabled(false);
        }
    }

    private void showUsers() {
        //Showing all the users
        final Iterable<User> users = userRepository.findAll();
        logger.info("Showing all the users: ");
        users.forEach(user -> logger.info(user.getName()));
    }

    private void buildMainLayout() {
        root = new HorizontalLayout();
        root.setSizeFull();
        root.setMargin(true);
        root.setSpacing(true);
        setContent(root);

        navigationButtons = new VerticalLayout();
        viewContainer = new Panel();

        viewContainer.setSizeFull();
        navigationButtons.setWidth("220");
        root.addComponents(navigationButtons, viewContainer);
        root.setExpandRatio(viewContainer, 1.0f);

        // Create a navigator to control the views
        navigator = new Navigator(this, viewContainer);
        navigator.addProvider(viewProvider);
        navigator.navigateTo(LoginView.VIEW_NAME);
    }

    private void configureLevelButtons() {
        logoutButton = new Button("Logout");
        logoutButton.setWidth("180");

        homeButton = new Button("Home");
        homeButton.setWidth("180");

        level1Button = new Button("Level 1");
        level1Button.setWidth("180");

        level2Button = new Button("Level 2");
        level2Button.setWidth("180");

        level3Button = new Button("Level 3");
        level3Button.setWidth("180");

        level4Button = new Button("Level 4");
        level4Button.setWidth("180");

        level5Button = new Button("Level 5");
        level5Button.setWidth("180");

        level6Button = new Button("Level 6");
        level6Button.setWidth("180");

        level7Button = new Button("Level 7");
        level7Button.setWidth("180");

        adminButton = new Button("Administration");
        adminButton.setWidth("180");

        navigationButtons.addComponents(homeButton, adminButton, logoutButton, new Label(), new Label(),  new Label("Levels board: "),
                level1Button, level2Button, level3Button, level4Button, level5Button, level6Button, level7Button,
                new Label());
    }

    private void addButtonListeners() {
        logoutButton.addClickListener(clickEvent -> {
            getSession().setAttribute("user", null);
            getUI().getNavigator().navigateTo(LoginView.VIEW_NAME);
        });

        homeButton.addClickListener(clickEvent -> navigate(MainQuizzerView.VIEW_NAME));
        level1Button.addClickListener(clickEvent -> navigate(Level1View.VIEW_NAME));
        level2Button.addClickListener(clickEvent -> navigate(Level2View.VIEW_NAME));
        level3Button.addClickListener(clickEvent -> navigate(Level3View.VIEW_NAME));
        level4Button.addClickListener(clickEvent -> navigate(Level4View.VIEW_NAME));
        level5Button.addClickListener(clickEvent -> navigate(Level5View.VIEW_NAME));
        level6Button.addClickListener(clickEvent -> navigate(Level6View.VIEW_NAME));
        level7Button.addClickListener(clickEvent -> navigate(Level7View.VIEW_NAME));
        adminButton.addClickListener(clickEvent ->  navigate(AdminView.VIEW_NAME) );
    }

    private void navigate(String viewName) {
        if (getSession().getAttribute("user") != null) {
            navigator.navigateTo(viewName);
        } else {
            Notification.show("You haven't unlocked this level yet !!!", Notification.Type.WARNING_MESSAGE);
            navigator.navigateTo(LoginView.VIEW_NAME);
        }
    }
}
